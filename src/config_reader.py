import os
from typing import List, Union
from datetime import datetime

from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import SecretStr
from dotenv import load_dotenv
from aiogram.types import Message
from google.oauth2.service_account import Credentials
import gspread
from gspread.cell import Cell
from loguru import logger
import pytz


load_dotenv(override=True)


class Settings(BaseSettings):
    BOT_TOKEN: SecretStr
    DB_URL: SecretStr
    ADMINS_ID: List
    SHEET_ID: SecretStr
    FTM: str
    FOR_PAY: str

    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
    )


class Google_sheet:
    def __init__(self) -> None:
        self.scope = ["https://www.googleapis.com/auth/spreadsheets"]
        self.creds = Credentials.from_service_account_file(
            "creds.json", scopes=self.scope
        )
        self.client = gspread.authorize(self.creds)

        self.sheet_id = config.SHEET_ID.get_secret_value()
        self.workbook = self.client.open_by_key(self.sheet_id)

        self.sheet = self.workbook.sheet1
        self.moscow_timezone = pytz.timezone("Europe/Moscow")

    def create_user(
        self,
        start_date,
        start_time,
        user_id,
        bot_is_active,
        username="",
    ):
        data = [
            start_date,
            start_time,
            user_id,
            username,
            bot_is_active,
        ]
        self.sheet.append_row(data, table_range="A1")

    def update_manual_trading(self, user_id, number):
        try:
            self.sheet.update_cell(self.sheet.find(str(user_id)).row, 8, number)
        except Exception as e:
            logger.error(f"update error {e}")

    def update_auto_trading(self, user_id, number):
        try:
            self.sheet.update_cell(self.sheet.find(str(user_id)).row, 9, number)
        except Exception as e:
            logger.error(f"update error {e}")

    def update_top_up(self, user_id, number):
        try:
            self.sheet.update_cell(self.sheet.find(str(user_id)).row, 10, number)
        except Exception as e:
            logger.error(f"update error {e}")

    def update_indecator_count(self, user_id, number):
        try:
            self.sheet.update_cell(self.sheet.find(str(user_id)).row, 11, number)
        except Exception as e:
            logger.error(f"update error {e}")

    def update_win_count(self, user_id, number):
        try:
            self.sheet.update_cell(self.sheet.find(str(user_id)).row, 12, number)
        except Exception as e:
            logger.error(f"update error {e}")

    def update_lose_win_count(self, user_id, number):
        try:
            self.sheet.update_cell(self.sheet.find(str(user_id)).row, 13, number)
        except Exception as e:
            logger.error(f"update error {e}")

    def update_win_amount(self, user_id, number):
        try:
            self.sheet.update_cell(self.sheet.find(str(user_id)).row, 14, number)
        except Exception as e:
            logger.error(f"update error {e}")


config = Settings()
tiime_options = [
            "5 —Å–µ–∫—É–Ω–¥",
            "15 —Å–µ–∫—É–Ω–¥",
            "30 —Å–µ–∫—É–Ω–¥",
            "1 –º–∏–Ω—É—Ç–∞",
            "5 –º–∏–Ω—É—Ç—ã",
            "10 –º–∏–Ω—É—Ç—ã",
            "15 –º–∏–Ω—É—Ç—ã",
        ]
print(config.FTM)
print(config.FOR_PAY)
google_sheet = Google_sheet()
os.environ["TZ"] = "Europe/Moscow"
TRADER_TOOLS = {
    "–í–∞–ª—é—Ç—ã": {
        "tools": [
            "AED/CNY OTC",
            "AUD/CAD OTC",
            "AUD/NZD OTC",
            "AUD/USD OTC",
            "CAD/CHF OTC",
            "CAD/JPY OTC",
            "EUR/CHF OTC",
            "EUR/GBP OTC",
            "EUR/TRY OTC",
            "GBP/AUD OT–°",
            "GBP/JPY OTC",
            "JOD/CNY OTC",
            "LBP/USD OTC",
            "MAD/USD OTC",
            "SAR/CNY OTC",
            "USD/BRL OTC",
            "USD/CNH OTC",
            "USD/COP OTC",
            "USD/DZD OTC",
            "USD/INR OTC",
            "USD/JPY OTC",
            "USD/MXN OTC",
            "USD/MYR OTC",
            "USD/PKR OT",
            "USD/RUB OTC",
            "USD/SGD OTC",
            "USD/THB OTC",
            "CHF/NOK OTC",
            "EUR/HUF OTC",
            "EUR/JPY OTC",
            "TND/USD OTC",
            "YER/USD OT–°",
            "USD/VND OTC",
            "GBP/USD OTC",
            "USD/CAD OTC",
            "QAR/CNY OTC",
            "EUR/NZD OTC",
            "USD/IDR OTC",
            "BHD/CNY OTC",
            "EUR/RUB OTC",
            "USD/BDT OTC",
            "USD/EGP OTC",
            "NZD/USD OTC",
            "EUR/USD OTC",
            "USD/CLP OTC",
            "AUD/JPY OTC",
            "USD/ARS OTC",
            "USD/PHP OTC",
            "OMR/CNY OT–°",
            "CHF/JPY OTC",
            "NZD/JPY OTC",
            "AUD/CHF OTC",
            "USD/CHF OTC",
        ],
        "time": tiime_options,
    },
    "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": {
        "tools": [
            "Cardano OT–°",
            "Avalanche OTC",
            "Bitcoin ETF OTC",
            "Chainlink OTC",
            "Polygon OTC",
            "Toncoin OTC",
            "TRON OTC",
            "Ethereum OTC",
            "Bitcoin OTC",
            "Ripple OTC",
            "Litecoin OTC",
            "BNB OTC",
            "Solana OTC",
            "Polkadot OTC",
            "Dogecoin OTC",
        ],
        "time": tiime_options,
        "image": "",
    },
    "–°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã": {
        "tools": [
            "Brent Oil OTC",
            "WTI Crude Oil OTC",
            "Silver OTC",
            "Gold OTC",
            "Natural Gas OTC",
            "Palladium spot OTC",
            "Platinum spot OTC",
        ],
        "time": tiime_options,
        "image": "",
    },
    "–ê–∫—Ü–∏–∏": {
        "tools": [
            "Apple OTC",
            "American Express OTC",
            "Intel OTC",
            "Pfizer Inc OTC",
            "Citigroup Inc OTC",
            "TWITTER OTC",
            "McDonald's OTC",
            "VISA OTC",
            "Microsoft OTC",
            "Alibaba OTC",
            "Johnson & Johnson OT–°",
            "Cisco OTC",
            "Boeing Company OTC",
            "Amazon OTC",
            "FedEx OTC",
            "Tesla OTC",
            "ExxonMobil OTC",
            "Netflix OTC",
            "FACEBOOK INC OTC",
        ],
        "time": tiime_options,
    },
    "–ò–Ω–¥–µ–∫—Å—ã": {
        "tools": [
            "AUS 200 OTC",
            "100GBP OTC",
            "D30EUR OTC",
            "DJI30 OTC",
            "E35EUR OTC",
            "E50EUR OTC",
            "F40EUR OTC",
            "JPN225 OTC",
            "US100 OTC",
            "SP500 OTC",
        ],
        "time": tiime_options,
    },
}

time_splitter = {
    "5 —Å–µ–∫—É–Ω–¥": 5,
    "15 —Å–µ–∫—É–Ω–¥": 15,
    "30 —Å–µ–∫—É–Ω–¥": 30,
    "1 –º–∏–Ω—É—Ç–∞": 60,
    "5 –º–∏–Ω—É—Ç—ã": 60 * 5,
    "10 –º–∏–Ω—É—Ç—ã": 60 * 10,
    "15 –º–∏–Ω—É—Ç—ã": 60 * 15,
}

indicator_form = """üí±–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞:(%s)\n‚è≥–í—Ä–µ–º—è —ç–∫—Å–ø–µ—Ä–∞—Ü–∏–∏:(%s)\n\n\n‚úÖ –ë–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ç–æ—Ä–≥–∏ –Ω–∞ %s \n–í—Ä–µ–º—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ 15 —Å–µ–∫—É–Ω–¥"""
lose_text = """–ë–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É 5 –º–∏–Ω—É—Ç, –≤—ã –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–π—Ç–µ –∏–∑ –∑–∞ —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ç–∞–π–º —Ñ—Ä–µ–π–º–µ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –±–æ—Ç–∞!\n–ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –≤–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–≤—É—é –ø–∞—Ä—É –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ !"""
